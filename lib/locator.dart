import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:get_it/get_it.dart';
import 'package:injectable/injectable.dart';

import 'locator.config.dart';

final locator = GetIt.instance;

/// Initializes the dependency graph.
@injectableInit
Future<void> buildDependencyGraph() async => locator.init();

/// Clear the dependency graph and disposes all the instances
/// which require it.
Future<void> clearDependencyGraph() async => locator.reset();

/// Injects a bloc generated by the dependency graph.
class BlocInjector<T extends StateStreamableSource<Object?>>
    extends BlocProvider<T> {
  BlocInjector({
    super.key,
    super.child,
    super.lazy = true,
    final param,
  }) : super(create: (final _) => locator<T>(param1: param));
}
